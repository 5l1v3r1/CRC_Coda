Chart for byte 4 (MSB torque)
Bit       value 
0(1)      B
1(2)      16
2(4)      2C
3(8)      58
4(10)     B0
5(20)     60 
6(40)     C0 
7(80)     1

(Ax C0)
7A (0111 1010) = F9
7F (0111 1111) = DE
80 (1000 0000) = A6

(Ax D2)
7A (0111 1010) = 2A
7D (0111 1101) = 1B
7E (0111 1110) = 6
80 (1000 0000) = 75
82 (1000 0010) = 63

(9x D2)
7d (0111 1101) = 4f
7e (0111 1110) = 52

97 d4 7d = ce
a5 d3 7d = ce

So switching from 90's to A0's means take one away from the LSB value
or switching from A0's to 90's means add one to LSB. either way would be valid

A0's are same as 60's
90's same as 50's for calc purposes.


The same principle as above does not seem to work for
the third byte. It'll work so long as the 4th byte is the same sometimes
but really it isn't reliable so something else must be going on. 


Chart for byte 3 (MSB torque) when Byte 4 is 0x7D
Bit       value
0(1)      AA 
1(2)      7F 
2(4)      FE 
3(8)      29 
4(10)     52
5(20)     A4
6(40)     9D
7(80)     EF

93 11(0001 0001) 7D = E8
93 12(0001 0010) 7d = 3d
93 1A(0001 1010) 7d = 14
93 1D(0001 1101) 7D = 3F
93 26(0010 0110) 7D = 35
93 28(0010 1000) 7D = 9D
93 50(0101 0000) 7d = DF 
93 60(0110 0000) 7d = 29
93 70(0111 0000) 7d = 7B
93 82(1000 0010) 7d = 80
93 80(1000 0000) 7d = FF
93 DD(1101 1101) 7D = 4D   
93 9D(1001 1101) 7D = D0
93 AD(1010 1101) 7D = 26
93 CC (1100 1100) 7D = B5 
93 8A (1000 1010) 7D = A9 

(93 00 7D = 10)
(93 00 00 = 7F)


All of the above values match the chart. So, it seems the chart is constant so long
as byte 4 is constant. I believe some entries in the chart are still the same when changing byte 4
but not all are. Let's try some more random examples with 7D as byte 4.

93 57 (0101 0111) 7D = 23 (does not match. XOR between result and correct answer is D7)
(Above would match if the following is XOR'd to 57 before the bits are used -> 0000 1100 = C) - which turns 57 into 5B

93 5B (0101 1011) 7D = DD (which, of course, is not the same answer as above! No match, XOR braca = FE)
(So, must toggle bit 2 or 0000 0100)

Other wrong ones:
93 1B 7D = 40 (calc answer = BE) 
(so, must toggle bit 2 0000 0100)

93 33 7D = CD (calc answer = 33)
(must also toggle bit 2 0000 0100)

93 37 7D = 1A (calc = CD) D7
(toggling factor = 0000 1100)

93 3b 7d = E4 (calc = 1A) FE
(toggling factor = 0000 0100)

93 47 7D = 71 (calc = A6) D7
(toggling factor = 0000 1100)

There seems to be a pattern that turns ?3 into ?7, ?7 to ?B, and ?B to ?F. I'll bet it turns ?F into ?3
This pattern would be (X + 4) where X is 3, 7, B, or F. It's possible that going from F to 3 also does properly
increment the high nibble. This pattern could be implemented by doing %4 and seeing if the value is 3.
I have confirmed (with 93 5F 7D) that you do add 4 no matter what even if it wraps to the next nibble
5F turns into 63. 



 




